# why use yaml to manage plugins
# see http://genkisugimoto.com/blog/manage-vim-plugins-via-yaml/

# StartUp Plugins{{{
- repo: Shougo/dein.vim

- repo: arcticicestudio/nord-vim
- repo: morhetz/gruvbox
- repo: chrisbra/Colorizer

# - repo: yuxiang-gao/spaceline.vim
#   hook_add: |
#             let g:spaceline_seperate_style= 'slant'
# let g:spaceline_colorscheme = 'nord'
# - repo: taigacute/spaceline.vim
#   hook_source: source  $VIM_PATH/layers/+ui/spaceline/config.vim

- repo: itchyny/lightline.vim
  depends: nord-vim
  # hook_source: source  $VIM_PATH/layers/+ui/lightline/config.vim
# - repo: itchyny/lightline-powerful

- repo: bagrat/vim-buffet
  hook_add: source $VIM_PATH/layers/+ui/buffet/config.vim

# - repo: "Shougo/vimproc.vim"
#   build: "make"
#}}}

# - repo: rafi/awesome-vim-colorschemes
# This plugin is a repackaging of Mislav Marohnić's tmux-navigator configuration described in this gist. When combined with a set of tmux key bindings, the plugin will allow you to navigate seamlessly between vim and tmux splits using a consistent set of hotkeys.
- repo: christoomey/vim-tmux-navigator
- repo: tpope/vim-sleuth
  hook_add: let g:sleuth_neighbor_limit = 5

# Core Plugins{{{
# - repo: SirVer/ultisnips
- repo: neoclide/coc.nvim
  merge: 0
  rev: release
  hook_add: source  $VIM_PATH/layers/+completion/coc/config.vim

- repo: honza/vim-snippets
  depends: coc.nvim
# }}}

# # GUI only:
# - { repo: equalsraf/neovim-gui-shim, if: has('gui_running') }

# # Vim8 only:
# - { repo: roxma/nvim-yarp, if: "! has('nvim')", depends: vim-hug-neovim-rpc }
# - { repo: roxma/vim-hug-neovim-rpc, if: "! has('nvim')" }

# Lazy Loading
# ==========================================

- repo: wsdjeg/dein-ui.vim
  on_cmd: DeinUpdate

# Denite{{{
- repo: Shougo/denite.nvim
  on_cmd: Denite
  depends: vim-devicons
  hook_source: |
    source  $VIM_PATH/layers/+completion/denite/config.vim
    source  $VIM_PATH/layers/+completion/denite/+denite_menu.vim

- repo: chemzqm/denite-git
  depends: denite.nvim
  on_cmd: [gitfiles, gitbranch, gitchanged, gitstatus, gitlog]
# }}}

# Interface{{{
- repo: ryanoasis/vim-devicons
  hook_add: let g:webdevicons_enable_denite = 1

- { repo: rhysd/accelerated-jk, on_map: { n: <Plug> } }

- repo: ludovicchabant/vim-gutentags
  if: executable('ctags')
  on_path: .*
  hook_source: source  $VIM_PATH/layers/+tools/vim-gutentags/config.vim

- repo: t9md/vim-choosewin
  on_map: { n: <Plug> }
  hook_source: source  $VIM_PATH/layers/+tools/choosewin/config.vim

- repo: mhinz/vim-startify
  on_cmd: Startify
  depends: vim-devicons
  hook_source: source  $VIM_PATH/layers/+ui/startify/config.vim
  hook_post_source: |
    let g:startify_session_autoload = 1
    function! StartifyEntryFormat()
      return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
    endfunction
    if has('nvim')
      autocmd TabNewEntered * Startify
      autocmd VimEnter *
            \ |   Startify
            \ |   Defx
            \ |   wincmd w 
    else
      autocmd VimEnter * let t:startify_new_tab = 1
      autocmd BufEnter *
            \ if !exists('t:startify_new_tab') && empty(expand('%')) |
            \   let t:startify_new_tab = 1 |
            \   Startify |
            \ endif
    endif
- repo: junegunn/vim-easy-align
  # on_ft: [vim,json,go,html,js,jsx,py,css,less,tmpl,toml,xml,sql,Dockerfile]
- repo: yuttie/comfortable-motion.vim
  on_func: comfortable_motion#flick
  hook_add: |
    let g:comfortable_motion_no_default_key_mappings = 1
    let g:comfortable_motion_impulse_multiplier = 1
    let g:comfortable_motion_friction = 80.0
    let g:comfortable_motion_air_drag = 2.0
- repo: rizzatti/dash.vim
  on_map: { n: <Plug> }
  hook_add: |
    let g:dash_map = {
      \ 'javascript': ['javascript', 'NodeJS'],
      \ 'javascriptreact': ['react'],
      \ 'html': ['html', 'svg'],
      \ 'go' : 'Go',
      \}
- repo: thinca/vim-quickrun
  on_cmd: QuickRun
  hook_add: |
    let g:quickrun_config = {
        \   "_" : {
        \       "outputter" : "message",
        \   },
        \}
    let g:quickrun_no_default_key_mappings = 1
- repo: simnalamburt/vim-mundo
  on_map: { n: <Plug> }
  hook_source: source  $VIM_PATH/layers/+tools/mundo/config.vim

- { repo: tpope/vim-repeat, on_map: .* }

- repo: liuchengxu/vim-which-key
  on_cmd: [Whichkey, Whichkey!]
  hook_source: source  $VIM_PATH/layers/+tools/whichkey/config.vim
  hook_post_source: |
    call which_key#register('<Space>', 'g:which_key_map')
    call which_key#register(';', 'g:which_key_localmap')
    call which_key#register(']', 'g:which_key_rsbgmap')
    call which_key#register('[', 'g:which_key_lsbgmap')

- repo: easymotion/vim-easymotion
  on_map: { n: <Plug> }
  hook_source: |
    let g:EasyMotion_do_mapping = 0
    let g:EasyMotion_prompt = 'Jump to → '
    let g:EasyMotion_keys = 'fjdkswbeoavn'
    let g:EasyMotion_smartcase = 1
    let g:EasyMotion_use_smartsign_us = 1

- repo: godlygeek/tabular
  on_cmd: Tab
# }}}

# File manager{{{
- repo: Shougo/defx.nvim
  on_cmd: Defx
  hook_source: source  $VIM_PATH/layers/+ui/defx/config.vim

- repo: kristijanhusak/defx-git
  on_source: defx.nvim
  hook_source: source  $VIM_PATH/layers/+ui/defx/+defx-git.vim

- repo: kristijanhusak/defx-icons
  on_source: defx.nvim

# }}}

# Search Plugins{{{
- repo: junegunn/fzf
  build: "./install --all"
  merged: 0

- repo: junegunn/fzf.vim
  depends: fzf
  on_cmd: [Colors, Rg, Buffers]
  on_func: Fzf_dev
  hook_source: source  $VIM_PATH/layers/+completion/fzf/config.vim

# }}}

# Git Plugins{{{
- { repo: taigacute/magit.vim, on_cmd: Magit }

- { repo: lambdalisue/gina.vim, on_cmd: Gina }

# - repo: chemzqm/vim-easygit
#   on_cmd: [Gcd, Glcd, Gcommit, Gblame, Gstatus, Gdiff, Gbrowse, Gstatus, Gpush]
#   hook_source: let g:easygit_enable_command = 1
- repo: tpope/vim-fugitive
  on_cmd:
    [
      Git,
      G,
      Gadd,
      Gcd,
      Gcommit,
      Gblame,
      Gstatus,
      Gdiff,
      Gbrowse,
      Gstatus,
      Gpush,
    ]

# }}}

# Language{{{

- { repo: honza/dockerfile.vim, on_ft: Dockerfile }
- { repo: junegunn/vim-emoji, on_ft: [markdown, vim] }

- { repo: leafgarland/typescript-vim, on_ft: [typescriptreact, typescript] }
- { repo: peitalin/vim-jsx-typescript, on_ft: [typescriptreact] }

- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: tmhedberg/SimpylFold, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python }
- repo: vim-python/python-syntax
  on_ft: python
  hook_add: let g:python_highlight_all = 1

- { repo: chemzqm/vim-jsx-improve, on_ft: [javascript, javascriptreact] }

- { repo: cespare/vim-toml, on_ft: toml }
- { repo: vim-scripts/xml.vim, on_ft: xml }
- { repo: pearofducks/ansible-vim, on_ft: [yaml.ansible, ansible_hosts] }

- repo: elzr/vim-json
  on_ft: json
  hook_add: let g:vim_json_syntax_conceal = 0

- repo: fatih/vim-go
  on_ft: go
  hook_source: source  $VIM_PATH/layers/+lang/go/config.vim

- repo: plasticboy/vim-markdown
  on_ft: markdown
  hook_add: source $VIM_PATH/layers/+lang/markdown/config.vim

- repo: iamcco/markdown-preview.nvim
  on_ft: [markdown, pandoc.markdown, rmd, md]
  hook_post_source: "call mkdp#util#install()"
  hook_source: |
    let g:mkdp_auto_start = 0
    let g:mkdp_auto_close = 1
    let g:mkdp_browser = ''
    autocmd FileType markdown nmap <LocalLeader>lp <Plug>MarkdownPreview
    autocmd FileType markdown nmap <LocalLeader>ls <Plug>MarkdownPreviewStop
    autocmd FileType markdown nmap <LocalLeader>lt <Plug>MarkdownPreviewToggle

# Python related
- { repo: vim-python/python-syntax, on_ft: python }
- { repo: Vimjas/vim-python-pep8-indent, on_ft: python }
- { repo: vim-scripts/python_match.vim, on_ft: python } # ?
- { repo: tmhedberg/SimpylFold, on_ft: python } # ?
- { repo: raimon49/requirements.txt.vim, on_ft: requirements }

- repo: pearofducks/ansible-vim
  on_ft: [ansible, ansible_hosts, jinja2]
  hook_add: |
    let g:ansible_extra_keywords_highlight = 1
    let g:ansible_template_syntaxes = {
      \   '*.json.j2': 'json',
      \   '*.(ba)?sh.j2': 'sh',
      \   '*.ya?ml.j2': 'yaml',
      \   '*.xml.j2': 'xml',
      \   '*.conf.j2': 'conf',
      \   '*.ini.j2': 'ini'
      \ }

# rust
- repo: rust-lang/rust.vim
  on_ft: [rust, rs]

# latex
- repo: lervag/vimtex
  on_ft: [latex, tex, bib]
  hook_source: source  $VIM_PATH/layers/+lang/latex/config.vim

# - repo: sheerun/vim-polyglot
# hook_add: let g:polyglot_disabled = ['latex']

# }}}

# Coding{{{
- repo: tyru/caw.vim
  on_map: { nx: <Plug> }

- repo: sbdchd/neoformat
  on_cmd: [Neoformat, Neoformat!]
  hook_source: source  $VIM_PATH/layers/+tools/neoformat/config.vim

- repo: neomake/neomake
  hook_add: source $VIM_PATH/layers/+tools/neomake/config.vim

- repo: Yggdroot/indentLine
  on_ft: [python, html, css, vim, javascript, javascriptreact, vue, markdown]
  hook_source: source $VIM_PATH/layers/+ui/indentline/config.vim

- repo: liuchengxu/vista.vim
  on_cmd: [Vista, Vista!, Vista!!]
  hook_source: source  $VIM_PATH/layers/+tools/vista/config.vim

- repo: mattn/emmet-vim
  on_event: InsertEnter
  on_ft: [html, css, javascript, javascriptreact]
  hook_source: |
    let g:user_emmet_complete_tag = 0
    let g:user_emmet_install_global = 0
    let g:user_emmet_install_command = 0
    let g:user_emmet_mode = 'i'

- repo: luochen1990/rainbow
  on_ft: [python, javascript, javascriptreact, html, css, go, vim, toml]
  hook_source: let g:rainbow_active = 1

- repo: Shougo/echodoc.vim
  on_event: CompleteDone
  hook_source: |
    call echodoc#enable()
    let g:echodoc#type = "virtual"
# - repo: w0rp/ale
#   hook_add: source ~/.config/nvim/core/plugins/vim-ale.vim

# }}}

# Writing{{{

- repo: junegunn/goyo.vim
  on_cmd: Goyo
  hook_source: source  $VIM_PATH/layers/+tools/goyo/config.vim

- repo: junegunn/Limelight.vim
  on_cmd: Limelight
#}}}

# TextObjectOperator{{{
- { repo: AndrewRadev/splitjoin.vim, on_map: { n: <Plug>Splitjoin } }
- { repo: terryma/vim-expand-region, on_map: { x: <Plug> } }
- { repo: kana/vim-textobj-user, on_func: textobj#user# }
- { repo: kana/vim-operator-user, lazy: 1 }
- { repo: kana/vim-niceblock, on_map: { x: <Plug> } }

- repo: kana/vim-smartchr
  on_event: InsertCharPre

- repo: kana/vim-operator-replace
  depends: vim-operator-user
  on_map: { vnx: <Plug> }

- repo: osyo-manga/vim-textobj-multiblock
  depends: vim-textobj-user
  on_map: { ox: <Plug> }
  hook_add: let g:textobj_multiblock_no_default_key_mappings = 1

- repo: machakann/vim-sandwich
  on_map: { vnx: [<Plug>(operator-sandwich-, <Plug>(textobj-sandwich-] }
  # hook_add: runtime macros/sandwich/keymap/surround.vim
  # sa
  #https://github.com/machakann/vim-sandwich/wiki/Introduce-vim-surround-keymappings
- repo: andymass/vim-matchup
  hook_add: |
    let g:loaded_matchit = 1
    let g:matchup_override_vimtex = 1

- repo: tpope/vim-surround
- repo: junegunn/rainbow_parentheses.vim
  on_cmd: [RainbowParentheses, RainbowParenthesesColors]
  hook_source: |
    augroup rainbow_lisp
        autocmd!
        autocmd FileType python,cpp,lisp,clojure,scheme RainbowParentheses
    augroup END

# }}}

# CommentPLuins too old, or find much better plugins{{{
# - repo: rhysd/vim-operator-surround
#   depends: [vim-operator-user, vim-textobj-multiblock]
#   on_map:  { vnx : <Plug> }
# use coc-git instead of vim-gitgutter
# - repo: airblade/vim-gitgutter
#   on_path: .*
#   hook_source: source ~/.config/nvim/core/plugins/vim-gitgutter.vim

# TMUX Integration {{{
- repo: benmills/vimux
  on_cmd: VimuxRunCommand
- repo: tmux-plugins/vim-tmux
  on_ft: tmux.conf
# }}}
